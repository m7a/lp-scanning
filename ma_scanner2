#!/bin/sh -e
# Ma_Sys.ma Scanning Helper Script 3.2.1,
# Copyright (c) 2013, 2019, 2020, 2025 Ma_Sys.ma.
# For further info send an e-mail to Ma_Sys.ma@web.de.

NUMBER_FILE=scan_number.txt
MODE=Gray
RESOLUTION=150
IND=8
OCRYN=N
DIRECTORY=

main() {
	if ! [ "$1" = "-t" ]; then
		head -n 4 "$0" | tail -n 3 | cut -c 3-
		echo
	fi
	if [ "$1" = "--help" ]; then
		display_help
		exit 0
	fi
	if [ "$1" = "-n" ]; then
		OCRYN=Y
		shift
	fi
	if [ "$1" = "-t" ]; then
		shift
		process_parallel_sub "$@"
		exit 0
	fi
	if [ $# = 1 ]; then
		DIRECTORY="$1"
		process_pdfs
	else
		if [ $# = 3 ]; then
			MODE="$1"
			RESOLUTION="$2"
			IND="$3"
		fi
		perform_scans
	fi
}

display_help() {
	cat <<EOF
Usage $0 [-n] [DIRECTORY|MODE RESOLUTION INDICES]"
-n          Enable OCR and number file from first recognized 6-digit number.
            Only enabled if converting to indexed.
MODE        Can be Lineart | Gray | Color. Default $MODE
RESOLUTION  Is given in DPI and depends on the scanner. Default $RESOLUTION
INDICES     Specifies the number of colors. Max=256.
            -1 means not to convert to indexed. Default $IND.
DIRECTORY   Instead of scanning, process all PDF files from directory DIRECTORY.
EOF

}

perform_scans() {
	echo "Use \"q\" to abort scanning. Press enter to perform next scan."
	nr=
	if [ -f "$NUMBER_FILE" ]; then
		nr="$(cat "$NUMBER_FILE")"
	else
		nr=1
	fi

	while read -r nothing && [ -z "$nothing" ]; do
		printf "Scan %d ... " "$nr"
		scanimage "--mode=$MODE" --resolution "$RESOLUTION" > \
								"scan_$nr.pnm"
		on="scan_$(printf "%03d" $nr).png"
		if [ "$IND" = "-1" ]; then
			convert "scan_$nr.pnm" "$on"
			rm "scan_$nr.pnm"
		else
			perform_indexed_conversion "scan_$nr.pnm" "$on" \
								"$OCRYN" &
		fi
		printf "ok "
		nr=$((nr + 1))
	done
	echo $nr > "$NUMBER_FILE"
}

process_pdfs() {
	mkdir "$DIRECTORY/tmp"
	# Note: pdfimages seems to work nicely with multiple parallel process,
	#       we do two times the virtual number of processes.
	find "$DIRECTORY" -maxdepth 1 -type f -name '*.pdf' | \
		parallel -j16 --bar pdfimages -png {} "$DIRECTORY/tmp/{/}"
	# Note: Tesseract seems to play bad with hyperthreading, just use the
	#       real physical number of processors.
	find "$DIRECTORY/tmp" -maxdepth 1 -type f -name "*.png" | \
		parallel -j4 --bar "$0" -t "$DIRECTORY" "$OCRYN" {} {/}
}

process_parallel_sub() {
	DIRECTORY="$1"
	OCRYN="$2"
	perform_indexed_conversion "$3" "$DIRECTORY/$4" "$OCRYN"
}

# $1 input filename
# $2 output filename (suggested)
# $3 OCRYN setting
perform_indexed_conversion() {
	gimp --quit --batch-interpreter=plug-in-script-fu-eval \
						-c -n -i -d -f -b - <<EOF
(let*	((infile "$1") (image 0))
	(set! image (car (gimp-file-load RUN-NONINTERACTIVE infile infile)))
	(gimp-image-convert-indexed image CONVERT-DITHER-NONE
				CONVERT-PALETTE-GENERATE 8 FALSE TRUE "")
	(gimp-file-save RUN-NONINTERACTIVE image "$2")
	(gimp-image-delete image)
	(gimp-quit 0))
EOF
	if [ "$3" = Y ]; then
		fid="$(tesseract "$2" stdout 2> /dev/null | sed -n 's/^\(.*[^0-9]\|\)\([0-9]\{6\}\)\(\|[^0-9].*\)$/\2/gp' | head -n 1)"
		if [ -n "$fid" ]; then
			newfn="madoc${fid}.png"
			if [ -f "$newfn" ]; then
				echo "WARNING $newfn exists." \
					"Cancel mv $2 $newfn. ENDWARNING"
			else
				mv "$2" "$newfn"
			fi
		else
			echo "WARNING $2 unidentified ENDWARNING"
		fi
	fi
	rm "$1"
}

main "$@"
